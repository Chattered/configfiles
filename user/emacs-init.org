#+TITLE: My Emacs Initialisation

* Introduction
  This page was generated from an [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Org-Mode.html][Org Mode]] file of literate emacs lisp, used to
initialise my Emacs sessions. I keep a normal [[file:~/.emacs][.emacs]] file in my home directory, for
customised variables automatically added through Emacs' [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][customisation
interface]]. Additionally, the file adds a simple [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html][hook]], to load /this/ file and perform
the real initialisation.

* General editor stuff
#+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (require 'helm)
#+END_SRC

Common Lisp compatibility for emacs lisp.

#+BEGIN_SRC emacs-lisp
 (require 'cl)
#+END_SRC

* TODO Ebib
  I manage my BibTeX bibliography using [[http://joostkremers.github.io/ebib/][Ebib]], which can insert links into org-mode
  files with tab-completion of BibTeX keys. To be able to open these links in ebib,
  we can define a new link type, and we can set it up so that, when exporting to
  LaTeX, we produce =\cite= commands, and when we export to HTML, we produce links to
  the url field of our BibTeX entry.

  #+BEGIN_SRC emacs-lisp
    (defun philed-ebib-get-url (key &optional db)
      "Get a URL value from the ebib database.

    Specifically, get the value of any url field of the entry with
    KEY in the current database, or in database DB if non-nil. If
    there is no such key or url field, returns nil."
      (let ((db (or db ebib--cur-db)))
        (unless db
          (user-error "No database"))
        (let ((url (ebib-db-get-field-value "url" key db t)))
          (when url
            (if (string-match "{\\(.*\\)}" url)
                (match-string 1 url)
              url)))))

    (defun philed-org-htmlize-url (url &optional desc)
      "Transcode URL with DESC as in org's html export."
      (let ((path
             (if (string-match "http:\\(.*\\)" url)
                 (match-string 1 url)
               (error "Invalid url: `%s'" url))))
        (org-html-link `(link (:type "http" :path ,path :raw-link ,url))
                       (or desc "") nil)))

    (defun philed-org-ebib-get-db ()
      "Return the ebib database of the bibliography file property."
      (let ((bibfile (assoc-default "bibliography" org-file-properties)))
        (when bibfile
          (or (ebib--get-db-from-filename (expand-file-name bibfile))
              (ebib--load-bibtex-file-internal
               (expand-file-name "~/documents/bibtex/proofpeer.bib"))))))

    (org-add-link-type "ebib"
                       '(lambda (arg)
                          (ebib (assoc-default "bibliography" org-file-properties) arg))
                       '(lambda (path desc format)
                          (case format
                            ('latex (format "%s\\cite{%s}" (if desc (concat desc "~") "") path))
                            ('html
                             (let ((db (or (philed-org-ebib-get-db) ebib--cur-db)))
                               (philed-org-htmlize-url
                                (philed-ebib-get-url path db)
                                desc))))))

  #+END_SRC

** TODO Better LaTeX export
   I really need to fire the LaTeX exporter function when outputting
   to LaTeX. At the moment, things like =\nbsp= aren't turned into
   =~=.

* Mu4e
(require 'mu4e)

(add-to-list 'mu4e-marks
             '(org-store-link
               :char "s"
               :prompt "store link"
               :action (lambda (docid msg target)
                         (let ((msgid (or (plist-get msg :message-id) "<none>")))
                           (push
                            (list (concat "mu4e:msgid:" msgid)
                                  (funcall org-mu4e-link-desc-func msg))
                            org-stored-links))))
             t)
