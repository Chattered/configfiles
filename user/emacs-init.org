#+TITLE: My Emacs Initialisation

* General editor stuff
#+BEGIN_SRC emacs-lisp
  (add-hook 'lisp-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (require 'helm)
  (require 'helm-config)
  (require 'haskell)
  (require 'haskell-mode)
  (require 'haskell-indentation)
  (add-hook 'haskell-mode-hook 'whitespace-mode)
  (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
  (require 'magit)
  (require 'ghc)
  (require 'helm-config)
  (require 'ace-jump-mode)
  (helm-mode 1)
  (pdf-tools-install)
  (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
  (global-undo-tree-mode)
#+END_SRC

Common Lisp compatibility for emacs lisp.

#+BEGIN_SRC emacs-lisp
 (require 'cl)
#+END_SRC

* TODO Ebib
  I manage my BibTeX bibliography using [[http://joostkremers.github.io/ebib/][Ebib]], which can insert links into org-mode
  files with tab-completion of BibTeX keys. To be able to open these links in ebib,
  we can define a new link type, and we can set it up so that, when exporting to
  LaTeX, we produce =\cite= commands, and when we export to HTML, we produce links to
  the url field of our BibTeX entry.

  #+BEGIN_SRC emacs-lisp
    (defun philed-ebib-get-url (key &optional db)
      "Get a URL value from the ebib database.

    Specifically, get the value of any url field of the entry with
    KEY in the current database, or in database DB if non-nil. If
    there is no such key or url field, returns nil."
      (let ((db (or db ebib--cur-db)))
        (unless db
          (user-error "No database"))
        (let ((url (ebib-db-get-field-value "url" key db t)))
          (when url
            (if (string-match "{\\(.*\\)}" url)
                (match-string 1 url)
              url)))))

    (defun philed-org-htmlize-url (url &optional desc)
      "Transcode URL with DESC as in org's html export."
      (let ((path
             (if (string-match "http:\\(.*\\)" url)
                 (match-string 1 url)
               (error "Invalid url: `%s'" url))))
        (org-html-link `(link (:type "http" :path ,path :raw-link ,url))
                       (or desc "") nil)))

    (defun philed-org-ebib-get-db ()
      "Return the ebib database of the bibliography file property."
      (let ((bibfile (assoc-default "bibliography" org-file-properties)))
        (when bibfile
          (or (ebib--get-db-from-filename (expand-file-name bibfile))
              (ebib--load-bibtex-file-internal
               (expand-file-name "~/documents/bibtex/proofpeer.bib"))))))

    (org-add-link-type "ebib"
                       '(lambda (arg)
                          (ebib (assoc-default "bibliography" org-file-properties) arg))
                       '(lambda (path desc format)
                          (case format
                            ('latex (format "%s\\cite{%s}" (if desc (concat desc "~") "") path))
                            ('html
                             (let ((db (or (philed-org-ebib-get-db) ebib--cur-db)))
                               (philed-org-htmlize-url
                                (philed-ebib-get-url path db)
                                desc))))))

  #+END_SRC

** TODO Better LaTeX export
   I really need to fire the LaTeX exporter function when outputting
   to LaTeX. At the moment, things like =\nbsp= aren't turned into
   =~=.

* Mu4e
#+BEGIN_SRC emacs-lisp
  (require 'mu4e)
  (require 'mu4e-contrib)
  (require 'org-mu4e)

  (load-file "mu4e.el")

  (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
        (cdr (assoc "Kolab" mu4e-account-alist)))

  (defun mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (message (match-string 1 maildir))
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) mu4e-account-alist)
                               nil t nil nil (caar mu4e-account-alist))))
           (account-vars (cdr (assoc account mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))

  (add-hook 'mu4e-compose-pre-hook 'mu4e-set-account)

  (add-to-list 'mu4e-marks
               '(org-store-link
                 :char "s"
                 :prompt "store link"
                 :action (lambda (docid msg target)
                           (let ((msgid (or (plist-get msg :message-id) "<none>")))
                             (push
                              (list (concat "mu4e:msgid:" msgid)
                                    (funcall org-mu4e-link-desc-func msg))
                              org-stored-links))))
               t)
#+END_SRC

** Set up bookmarks:

#+BEGIN_SRC emacs-lisp
  ;; private
  (defvar philed-blocked nil)

  (defvar philed-mu4e-mailing-lists
    (mapconcat
     (lambda (x) (concat "list:" x))
     '("libraries.haskell.org")
     " OR "))

  (defvar philed-mu4e-jira "from:Jira AND subject:JIRA")

  (defvar philed-mu4e-notifications
    (mapconcat
     (lambda (x) (concat "from:" x))
     '("auto-confirm@amazon.co.uk"
       "noreply@bandcamp.com"
       "digital-no-reply@amazon.co.uk")
     " OR "))

  (setf mu4e-bookmarks
        (list (make-mu4e-bookmark
               :name "Unread messages"
               :query (concat "flag:unread AND NOT "
                              (concat
                               "(" philed-mu4e-mailing-lists
                               " OR "
                               philed-mu4e-notifications
                               " OR "
                               philed-mu4e-jira
                               (if philed-blocked
                                   (concat " OR " philed-blocked)
                                 ""))
                              ")")
               :key 117)
              (make-mu4e-bookmark
               :name "Today's messages"
               :query (concat "flag:flagged OR (date:today..now AND NOT "
                              (concat
                               "(" philed-mu4e-mailing-lists
                               " OR "
                               philed-mu4e-notifications
                               " OR "
                               philed-mu4e-jira
                               (if philed-blocked
                                   (concat " OR " philed-blocked)
                                 ""))
                              "))")
               :key 116)
              (make-mu4e-bookmark
               :name "Last 7 days"
               :query (concat "flag:flagged OR (date:7d..now AND NOT "
                              (concat
                               "(" philed-mu4e-mailing-lists
                               " OR "
                               philed-mu4e-notifications
                               " OR "
                               philed-mu4e-jira
                               (if philed-blocked
                                   (concat " OR " philed-blocked)
                                 ""))
                              "))")
               :key 119)
              (make-mu4e-bookmark
               :name "JIRA"
               :query philed-mu4e-jira
               :key 115)
              (make-mu4e-bookmark
               :name "Mailing lists"
               :query philed-mu4e-mailing-lists
               :key 108)
              (make-mu4e-bookmark
               :name "Notifications"
               :query philed-mu4e-notifications
               :key 110)
              ))
#+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp
    (defun phil-org-display-inline-images ()
      (when org-inline-image-overlays
        (org-redisplay-inline-images)))

    (add-hook 'org-babel-after-execute-hook 'phil-org-display-inline-images)
  #+END_SRC

* EMMS
#+BEGIN_SRC emacs-lisp
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
#+END_SRC
